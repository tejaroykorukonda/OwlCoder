//pick and non pick
======================================
//with duplicates
------------------
#include<iostream>
#include<vector>
using namespace std;
void c(int ind,int arr[],int n,int k,vector<int>&ds){
    //base case
    if(ind==n){
        if(k==0){
            for(auto it:ds){
                cout<<it<<" ";
            }
            cout<<endl;
        }
            return;
        
    }
    //recursive 
  //case pick
    if(arr[ind]<=k){
    ds.push_back(arr[ind]);
    k=k-arr[ind];
    c(ind,arr,n,k,ds);
    k=k+arr[ind];
    ds.pop_back();
}
   //non pick
   c(ind+1,arr,n,k,ds);
}
int main()
{
   int n,k;
   cin>>n>>k;
   int arr[n];
   for(int i=0;i<n;i++){
    cin>>arr[i];
   }
   vector<int>ds;
   c(0,arr,n,k,ds);

}
//without using  duplicates
----------------------------
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& c, int t) {
        sort(c.begin(), c.end());
        vector<vector<int>> ans;
        vector<int> v;
        solve(0, t, c, ans, v);
        return ans;
    }

    void solve(int i, int t, vector<int>& c, vector<vector<int>>& ans, vector<int>& v) {
        if (t == 0) {
            ans.push_back(v);
            return;
        }
        for (int j = i; j < c.size(); j++) {
            if (j > i && c[j] == c[j - 1]) continue;
            if (c[j] > t) break;
            v.push_back(c[j]);
            solve(j + 1, t - c[j], c, ans, v);
            v.pop_back();
        }
    }
};

int main() {
    Solution s;
    int n;
    cin >> n;
    vector<int> nums(n);
    for (int i = 0; i < n; i++) cin >> nums[i];
    int target;
    cin >> target;
    auto result = s.combinationSum2(nums, target);

    cout << "Result:" << endl;
    for (const auto& combo : result) {
        cout << "[ ";
        for (int num : combo) cout << num << " ";
        cout << "]" << endl;
    }

    return 0;
}
5 6
1 2 3 4 6
Result:
[ 1 2 3 ]
[ 2 4 ]
[ 6 ]


====================================
//PERMUTATION _RECURSION
====================================
#include <stdio.h>
#include<bits/stdc++.h>
using namespace std;
string s="abc";
int n=s.size();
void printPermituations(string ss,int frq[])
{

    if(s.size()==ss.size())
    {
        cout<<ss<<endl;
        return;
    }
    for(int i=0;i<n;i++)
    {
        if(frq[i]==0)
        {
            frq[i]=1;
            printPermituations(ss+s[i],frq);
            frq[i]=0;
        }
    }
}
int main() {
	string ss="";
	int ans[n]={0};

	printPermituations(ss,ans);
	return 0;
}
