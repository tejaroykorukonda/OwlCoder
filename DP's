https://atcoder.jp/contests/dp/tasks/dp_a
-----------------------------------
FROG-A
==============
#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 100001;
int dp[MAX_N];

int Fun(int idx, int A[], int n) {
    if (idx == n - 1)
        return 0;
    if (dp[idx] != -1)
        return dp[idx];

    // Recursive call
    int left = abs(A[idx] - A[idx + 1]) + Fun(idx + 1, A, n);

    // Check if idx+2 is within array bounds
    int right = INT_MAX;
    if (idx + 2 <= n - 1) {
        right = abs(A[idx] - A[idx + 2]) + Fun(idx + 2, A, n);
    }

    return dp[idx] = min(left, right);
}

int main() {
    int n;
    cin >> n;

    int A[MAX_N];
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }

    memset(dp, -1, sizeof(dp));
    cout << Fun(0, A, n);

    return 0;
}

-----------------
FROG-B
=================
#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 100001;
int dp[MAX_N];

int Fun(int idx, int A[], int n,int k) {
    if (idx == n - 1)
        return 0;
    if (dp[idx] != -1)
        return dp[idx];

    // // Recursive call
    // int left = abs(A[idx] - A[idx + 1]) + Fun(idx + 1, A, n);

    // // Check if idx+2 is within array bounds
    // int right = INT_MAX;
    // if (idx + 2 <= n - 1) {
    //     right = abs(A[idx] - A[idx + 2]) + Fun(idx + 2, A, n);
    // }

    // return dp[idx] = min(left, right);
    int ans=INT_MAX;
    for(int i=1;i<=k;i++){
        if(idx+i<=n-1){
            ans=min(ans,abs(A[idx]-A[idx+i])+Fun(idx+i,A,n,k));
        }

    }
    return ans;
}

int main() {
    int n,k;
    cin >> n>>k;

    int A[MAX_N];
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }

    memset(dp, -1, sizeof(dp));
    cout << Fun(0, A, n,k);

    return 0;
}

